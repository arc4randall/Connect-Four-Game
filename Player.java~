public class Player {
  private static final int depthVal = 8;
  //private static final int pruneVal = -10;
  
  public int move(int[][] board, int player) {
    boolean p = false;
    if(player == 10) p = true;
    
    int max = Integer.MIN_VALUE;
    int col = 5;
    for(int i = 0; i < 8; i++) {
      if(insert(board, i, p)) {
        int val = move(board,!p,Integer.MIN_VALUE,Integer.MAX_VALUE,1);
        remove(board,i);
        if(val > max) {
          col = i; 
          max = val;
        }
      }
    }
    return col;
  }
  
  private int move(int[][] board, boolean player, int alpha, int beta, int depth) {

    int evalNum = eval(board);
    
    if(evalNum == Integer.MAX_VALUE || evalNum == Integer.MIN_VALUE || depth == depthVal) return evalNum;
    //if(player && evalNum < pruneVal) return evalNum;
    //if(!player && evalNum > prune*-1) return evalNum;
    
    if(player) {
      int val = Integer.MIN_VALUE;
      for(int i = 0; i < 8; i++) {
        if(insert(board, i, true)) {
          alpha = Math.max(alpha,val);

          val = Math.max(val,move(board,false,alpha,beta,depth+1));
          remove(board,i);
          if(beta < alpha) break;
        }
      }
      return val;
    } else {
      int val = Integer.MAX_VALUE;
      for(int i = 0; i < 8; i++) {
        if(insert(board, i, false)) {
          beta = Math.min(alpha,val);

          val = Math.min(val,move(board,true,alpha,beta,depth+1));
          remove(board,i);
          if(beta < alpha) break;
        }
      }
      return val;
    }
  }
  
  private boolean insert(int[][] board, int column, boolean player){
    for(int i = 7; i >=0; i--) {
      if((board[i][column] == 0) && player == true){
        board[i][column] = 10;
        return true;
      }
      else if((board[i][column] == 0) && player == false){
        board[i][column] = 1;
        return true;
      }
    }
    return false;
    
  }
  
  private void remove(int[][] board, int column){
    int i=0;
    while (board[i][column] == 0 && i < 8){
      i++;
    }
    if(board[i][column] != 0){
      board[i][column] = 0;
    }
  }
  
  
  /* Final constants used to gather information about what the graph contains.
   * When these are all added together they return a value that eval() can use
   * to process the characteristics of the board. and return a value.
   */
  private static final int redCnt2 = 10000;
  private static final int redCnt3 = 1000000;
  private static final int blueCnt2 = 1;
  private static final int blueCnt3 = 100;
  private static final int redWillFill = 10000000;
  private static final int blueWillFill = 1000;
  
  // Weights arbitrarily given to every characteristic possible
  private static final int valOf2 = 5;
  private static final int valOf3 = 7*valOf2;
  private static final int valOfFill = 7*valOf2;
  private static final int valOfMultFill = Integer.MAX_VALUE / 16;
  
  /* Evaluates the board, positive if in favor of blue, negative if in favor of red.
   * Also returns the max value or min value if someone wins
   */
  public int eval(int[][] board){
    int rowInfo = seekRows(board);
    int colInfo = seekCols(board);
    int diaInfo = seekDias(board);
    
    if(rowInfo == -1 || colInfo == -1 || diaInfo == -1) return Integer.MIN_VALUE;
    if(rowInfo == -10 || colInfo == -10 || diaInfo == -10) return Integer.MAX_VALUE;
    
    int blue2 = (rowInfo/blueCnt2)%100 + (colInfo/blueCnt2)%100 + (diaInfo/blueCnt2)%100;
    int blue3 = (rowInfo/blueCnt3)%10 + (colInfo/blueCnt3)%10 + (diaInfo/blueCnt3)%10;
    int red2 = (rowInfo/redCnt2)%100 + (colInfo/redCnt2)%100 + (diaInfo/redCnt2)%100;;
    int red3 = (rowInfo/redCnt3)%10 + (colInfo/redCnt3)%10 + (diaInfo/redCnt3)%10;
    
    int blue3Fill = (rowInfo/blueWillFill)%10 + (colInfo/blueCnt3)%10 + (diaInfo/blueWillFill)%10;
    int red3Fill = (rowInfo/redWillFill)%10 + (colInfo/blueCnt3)%10 + (diaInfo/redWillFill)%10;
    
    if (blue3Fill > 1 && red3Fill < 2) return valOfMultFill;
    if (red3Fill > 1 && blue3Fill < 2) return valOfMultFill * -1;
    
    return ((blue2*valOf2 + blue3*valOf3+blue3Fill*valOfFill) - (red2*valOf2 + red2*valOf2+red3Fill*valOfFill));
  }
  
  //Wrapper for the seekRows method
  private int seekRows(int[][] board) {
    return seekRows(board, 0, 0, 0);
  }
  
  /* Digits of retVal are eight digits long e.g. 01|02|23|04 which means
   * 1 red row of three (0 about to fill), 2 red row of two, 3 blue row of 
   * three (2 about to fill), and 4 blue row of. Else, it returns if red 
   * or blue wins with -1 or -10 respectively
   */
  private int seekRows(int[][] board, int row, int col, int retVal) {
    if(row >= 7 && col >= 5) return retVal;
    if(col >= 5) return seekRows(board, row + 1, 0, retVal);
    
    int sum = 0;
    for(int i = col; i < col + 4 && i < 8; i++)
      sum += board[row][i];
    
    int numRed = sum % 10;
    int numBlue = sum / 10;
    
    if(sum == 0);
    else if(numRed < 2 && numBlue < 2);
    else if(numRed == 4) return -1;
    else if(numBlue == 4) return -10;

    else if(numBlue == 0) {
      if(numRed == 3) {
        retVal += redCnt3;
        int empCol = findMissing(board,row,col);
        if(row + 1 == 8 || board[row+1][empCol] != 0) retVal += redWillFill;
        if(isTrap(board,row,empCol,true)) retVal += redWillFill;
      }
      else if (numRed == 2)retVal +=redCnt2;
    }
    
    else if(numRed == 0) {
      if(numBlue == 3) {
        retVal += blueCnt3;
        int empCol = findMissing(board,row,col);
        if(row + 1 == 8 || board[row+1][empCol] != 0) retVal += blueWillFill;
        if(isTrap(board,row,empCol,false)) retVal += blueWillFill;
      }
      else if(numBlue == 2) retVal += blueCnt2;
    }
    
    return seekRows(board, row, col + 1, retVal);
  }
  // seeks out the missing value in a row
  private int findMissing(int[][] board, int row, int col) {
    int colCheck = col;
    if(board[row][col+1] == 0) colCheck++;
    else if(board[row][col+2] == 0) colCheck += 2;
    else if(board[row][col+3] == 0) colCheck += 3;
    return colCheck;
  }
  
  //returns the minimum of the three
  private static int min(int a, int b, int c) {
    if (a < b) {
      if (a < c) return a;
    } else if (b < c) return b;
    return c;
  }
  
  //returns the maximum of the three
  private static int max(int a, int b, int c) {
    if (a > b) {
      if (a > c) return a;
    } else if (b > c) return b;
    return c;
  }
  
  //tests if a trap exists that guarrentees a win
  private boolean isTrap(int[][] board, int row, int col, boolean isRed) {
    if (row == 0) return false;
    int point = row - 1;
    int startCol = max(col-3,0,0); 
    int endCol = min(7,7, col+3);
    
    for (int i = startCol; i <= endCol-3; i++){
      int sum = 0;
      for (int j = 0; j < 4; j++)
        sum += board[point][i+j];
      int temp;
      if(isRed) temp = sum % 10;
      else temp = sum / 10;
      if (temp == 3) return true;
    }

    int startInc = min(col, point, 3); 
    int endInc = min(7-col, 7-point, 3);
     
    startCol = col - startInc;
    endCol = col + endInc;
    int startRow = point - startInc; 
    int endRow = point + endInc;
    //neg
    for(int i = startCol; i <= endCol-3; i++) {
      int sum = 0;
      int offset = i - startCol;
      for (int j = 0; j < 4; j++)
        sum +=board[startRow+offset+j][i+j];
      int temp;
      if(isRed) temp = sum % 10;
      else temp = sum / 10;
      if (temp == 3) return true;
    }
    //pos
    for(int i = startCol; i <= endCol-3; i++) {
      int sum = 0;
      int offset = i - startCol;
      for (int j = 0; j < 4; j++)
        sum +=board[endRow-offset-j][i+j];
      int temp;
      if(isRed) temp = sum % 10;
      else temp = sum / 10;
      if (temp == 3) return true;
    }
    
    return false;
  }
  //Wrapper for seacking collums
  private int seekCols(int[][] board) {
    return seekCols(board, 7, 0, 0);
  }
  
  // similar rules with the 8 digit retVal as in seekRows()
  private int seekCols(int[][] board, int row, int col, int retVal){
    if(col == 8) return retVal;
    
    int base = board[row][col];
    
    if(base == 0) return seekCols(board, 7, col+1, retVal);
    
    //checking for red
    else if(base == 1) {
      int r = row - 1;
      int count = 1;
      while(r < 0 || board[r][col] != 10) {
        if (count == 4) return -1;
        else if(r < 0) return seekCols(board, 7, col + 1, retVal);
        else if(board[r][col] == 0) {
          if (count == 3) retVal += redCnt3;
          else if (count == 2) retVal += redCnt2;
          return seekCols(board, 7, col + 1, retVal);
        }
        r--;
        count++;
      }
      return seekCols(board, r, col, retVal);
    }
    
    //checking for blue
    else {
      int r = row - 1;
      int count = 1;
      while(r < 0 || board[r][col] != 1) {
        if (count == 4) return -10;
        else if(r < 0) return seekCols(board, 7, col + 1, retVal);
        else if(board[r][col] == 0) {
          if (count == 3) retVal += blueCnt3;
          else if (count == 2) retVal += blueCnt2;
          return seekCols(board, 7, col + 1, retVal);
        }
        r--;
        count++;
      }
      return seekCols(board, r, col, retVal);
    }
    
  }
  
  private int seekDias(int board[][]) {
    
    int retVal = 0;
    
    for(int i = 3; i <= 7; i++){
      for(int j = 0; j <= i - 3; j++){
        int sum = 0;
      
        for(int k = 0; k <= 3; k++)
        sum += board[i-j-k][j+k];
      
        int numRed = sum % 10;
        int numBlue = sum / 10;
        
        if(sum == 0);
        else if(numRed == 4) return -1;
        else if(numBlue == 4) return -10;
        
        else if(numBlue == 0) {
          if(numRed == 3) {
            retVal += redCnt3;
            int emptyRow = 0;
            int emptyCol = 0;
            for(int k = 0; k <= 3; k++)
              if(board[i-j-k][j+k] == 0) {emptyRow =i-j-k; emptyCol = j+k;}
            if(emptyRow + 1 == 8 || board[emptyRow + 1][emptyCol] != 0) retVal += redWillFill;
          }
          else if (numRed == 2)retVal +=redCnt2;
        }
      
        else if(numRed == 0) {
          if(numBlue == 3) {
            retVal += blueCnt3;
            int emptyRow = 0;
            int emptyCol = 0;
            for(int k = 0; k <= 3; k++)
              if(board[i-j-k][j+k] == 0) {emptyRow =i-j-k; emptyCol = j+k;}
            if(emptyRow + 1 == 8 || board[emptyRow + 1][emptyCol]!= 0) retVal += blueWillFill;
          }
          else if(numBlue == 2) retVal += blueCnt2;
        }
      }
      
      for(int j = 0; j <= i - 3; j++){
        int sum = 0;
        
        for(int k = 0; k <= 3; k++)
          sum += board[i-j-k][7-j-k];
        
        int numRed = sum % 10;
        int numBlue = sum / 10;
        
        if(sum == 0);
        else if(numRed == 4) return -1;
        else if(numBlue == 4) return -10;
        else if(numBlue == 0) {
          if(numRed == 3) {
            retVal += redCnt3;
            int emptyRow = 0;
            int emptyCol = 0;
            for(int k = 0; k <= 3; k++)
              if(board[i-j-k][7-j-k] == 0) {emptyRow =i-j-k; emptyCol = 7-j-k;}
            if(emptyRow + 1 == 8 || board[emptyRow + 1][emptyCol] != 0) retVal += redWillFill;
          }
          else if (numRed == 2)retVal +=redCnt2;
        }
        
        else if(numRed == 0) {
          if(numBlue == 3) {
            retVal += blueCnt3;
            int emptyRow = 0;
            int emptyCol = 0;
            for(int k = 0; k <= 3; k++)
              if(board[i-j-k][7-j-k] == 0) {emptyRow =i-j-k; emptyCol = 7-j-k;}
            if(emptyRow + 1 == 8 || board[emptyRow + 1][emptyCol] != 0) retVal += blueWillFill;
          }
          else if(numBlue == 2) retVal += blueCnt2;
        }
      }
      
      for(int j = 0; j <= i-3 && i != 7; j++) {
        int sum = 0;
        
        for(int k = 0; k <= 3; k++)
          sum += board[7-j-k][i-j-k];
        
        int numRed = sum % 10;
        int numBlue = sum / 10;
        
        if(sum == 0);
        else if(numRed == 4) return -1;
        else if(numBlue == 4) return -10;
        else if(numBlue == 0) {
          if(numRed == 3) {
            retVal += redCnt3;
            int emptyRow = 0;
            int emptyCol = 0;
            for(int k = 0; k <= 3; k++)
              if(board[7-j-k][i-j-k] == 0) {emptyRow =7-j-k; emptyCol = i-j-k;}
            if(emptyRow + 1 == 8 || board[emptyRow + 1][emptyCol] != 0) retVal += redWillFill;
          }
          else if (numRed == 2)retVal +=redCnt2;
        }
        
        else if(numRed == 0) {
          if(numBlue == 3) {
            retVal += blueCnt3;
            int emptyRow = 0;
            int emptyCol = 0;
            for(int k = 0; k <= 3; k++)
              if(board[7-j-k][j+k] == 0) {emptyRow =7-j-k; emptyCol = j+k;}
            if(emptyRow + 1 == 8 || board[emptyRow + 1][emptyCol] != 0) retVal += blueWillFill;
          }
          else if(numBlue == 2) retVal += blueCnt2;
        }
      }
      
      for(int j = 0; j <= i-3 && i != 7; j++) {
        int sum = 0;
        
        for(int k = 0; k <= 3; k++)
          sum += board[7-j-k][7-i+j+k];
        
        int numRed = sum % 10;
        int numBlue = sum / 10;
        
        if(sum == 0);
        else if(numRed == 4) return -1;
        else if(numBlue == 4) return -10;
        else if(numBlue == 0) {
          if(numRed == 3) {
            retVal += redCnt3;
            int emptyRow = 0;
            int emptyCol = 0;
            for(int k = 0; k <= 3; k++)
              if(board[7-j-k][7-i+j+k] == 0) {emptyRow =7-j-k; emptyCol = 7-i+j+k;}
            if(emptyRow + 1 == 8 || board[emptyRow + 1][emptyCol] != 0) retVal += redWillFill;
          }
          else if (numRed == 2)retVal +=redCnt2;
        }
        
        else if(numRed == 0) {
          if(numBlue == 3) {
            retVal += blueCnt3;
            int emptyRow = 0;
            int emptyCol = 0;
            for(int k = 0; k <= 3; k++)
              if(board[7-j-k][7-i+j+k] == 0) {emptyRow =7-j-k; emptyCol = 7-i+j+k;}
            //int zzz = board[emptyRow + 1][emptyCol];
            if(emptyRow + 1 == 8 || board[emptyRow + 1][emptyCol] != 0) retVal += blueWillFill;
          }
          else if(numBlue == 2) retVal += blueCnt2;
        }
      }
    }
      
      return retVal;
  }
    
  public static void main(String[] args) {
    int[][] boardSamp =
    { {00,00,00,00,00,00,00,00},
      {00,00,00,00,00,00,00,00},
      {00,00,00,00,00,00,00,00},
      {00,00,00,00,00,00,00,00},
      {00,00,00,00,00,00,00,00},
      {00,00,00,00,00,00,00,00},
      {00,00,00,00,00,00,00,00},
      {00,00,00,00,00,00,00,00}};
    
    Player p = new Player();
    
    System.out.println(p.seekCols(boardSamp));
    System.out.println(p.seekRows(boardSamp));
    System.out.println(p.seekDias(boardSamp));
    System.out.println(p.eval(boardSamp));
    System.out.println(p.move(boardSamp, 10));
  }
    
    
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  